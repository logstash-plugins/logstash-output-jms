:plugin: jms
:type: output
:default_codec: plain

///////////////////////////////////////////
START - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////
:version: %VERSION%
:release_date: %RELEASE_DATE%
:changelog_url: %CHANGELOG_URL%
:include_path: ../../../../logstash/docs/include
///////////////////////////////////////////
END - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////

[id="plugins-{type}s-{plugin}"]

=== Jms output plugin

include::{include_path}/plugin_header.asciidoc[]

==== Description

Write events to a Jms Broker. Supports both Jms Queues and Topics.

For more information about Jms, see <https://javaee.github.io/tutorial/jms-concepts.html>
For more information about the Ruby Gem used, see <http://github.com/reidmorrison/jruby-jms>

JMS configurations can be done either entirely in the Logstash configuration file, or in a mixture of the Logstash
  configuration file, and a specified yaml file. Simple configurations that do not need to make calls to implementation
  specific methods on the connection factory can be specified entirely in the Logstash configuration, whereas more complex
  configurations, should also use the combination of yaml file and Logstash configuration.



==== Sample Configuration using Logstash Configuration Only

These configurations use the Logstash Configuration Only

===== Logstash Confuguration for Non-JNDI Connection
[source,ruby]
--------------------------------------------------
 output {
    jms {
        # Configuration Settings
        broker_url => 'ssl://localhost:61617' <1>
        destination => "myqueue" <2>
        factory => org.apache.activemq.ActiveMQConnectionFactory <3>
        pub_sub => false <4>
        # JMS provider credentials if needed <5>
        username => 'username'
        password => 'secret'
        # JMS provider keystore and truststore details <6>
        keystore => '/Users/logstash-user/security/keystore.jks'
        keystore_password => 'another_secret'
        truststore => '/Users/logstash-user/security/truststore.jks'
        truststore_password => 'yet_another_secret'
        require_jars => ['/usr/share/jms/activemq-all-5.15.9.jar','/usr/share/jms/log4j-1.2.17.jar'] <7>
        # Connection factory specific settings
        factory_settings => { <8>
          set_timeout => 10
        }
    }
 }
--------------------------------------------------

<1> Url of the broker to connect to. Please consult your JMS provider documentation for the exact syntax to use
    here, including how to enable failover.
<2> Name of the topic or queue that the plugin will listen to events from.
<3> Full name (including package name) of Java connection factory used to create a connection with your JMS provider.
<4> Determines whether the event source is a queue or a topic, set to `true` for topic, `false` for queue.
<5> Credentials to use when connecting to the JMS provider, if required.
<6> Keystore and Truststore to use when connecting to the JMS provider, if required.
<7> List of jars required by the JMS provider. Paths should be the fully qualified location of all jar files required
     by the JMS provider. This list may also include dependent jars as well as specific jars from the JMS provider.
<8> Additional settings that are set directly on the ConnectionFactory object can be added here. See you JMS provider
     documentation for details.

===== Logstash Configuration for JNDI Connection

[source,ruby]
--------------------------------------------------
 output {
    jms {
        # Logstash Configuration Settings <1>
        destination => "myqueue"
        pub_sub => false
        # JNDI Settings
        jndi_name => /jms/cf/default <2>
        jndi_context => { <3>
          'java.naming.factory.initial' => com.solacesystems.jndi.SolJNDIInitialContextFactory
          'java.naming.security.principal' => solace-cloud-client@user
          'java.naming.provider.url' => tcp://address.messaging.solace.cloud:20608
          'java.naming.security.credentials' => verysecret
        }
        require_jars=> ['/usr/share/jms/commons-lang-2.6.jar', <4>
                      '/usr/share/jms/sol-jms-10.5.0.jar',
                      '/usr/share/jms/geronimo-jms_1.1_spec-1.1.1.jar',
                     '/usr/share/jms/commons-lang-2.6.jar]'
  }
}
--------------------------------------------------

<1> Configuration settings. Note that there is no `broker_url` or `username` or `password` defined here - these are
    defined in the `jndi_context` hash.
<2> JNDI name for this connection.
<3> JNDI context settings hash. Contains details of how to connect to JNDI server. See your JMS provider documentation for
     implementation specific details.
<4> List of jars required by the JMS provider. Paths should be the fully qualified location of all jar files required
     by the JMS provider. This list may also include dependent jars as well as specific jars from the JMS provider.


==== Sample Configuration using Logstash Configuration and Yaml File

How you configure the `yaml` file depends on whether the connection is via JNDI:


===== Non-JNDI Connection

This section contains sample configurations for connecting to a JMS provider that is not using JNDI using a combination
 of the Logstash configuration and the yaml file

===== Logstash Configuration for Non-JNDI Connection (for configs including yaml)

[source,ruby]
--------------------------------------------------
output{
  jms {
        # Logstash Configuration File Settings <1>
        destination => "myqueue"
        pub_sub => false
        # JMS Provider credentials <2>
        username => xxxx
        password => xxxx
        # Location of yaml file, and which section to use for configuration
        yaml_file => "~/jms.yml"  <3>
        yaml_section => "mybroker" <4>
  }
}
--------------------------------------------------

<1> Configuration settings
<2> Username and password for the connection.
<3> Full path to a yaml file containing the definition for the ConnectionFactory.
<4> Section name in the yaml file of the ConnectionFactory for this plugin definition

===== Yaml File for Non-JNDI Connection

[source,yaml]
--------------------------------------------------
mybroker: <1>
  :broker_url: 'ssl://localhost:61617' <2>
  :factory: org.apache.activemq.ActiveMQConnectionFactory <3>
  :send_timeout: 30000 <4>
  :require_jars: <5>
    - /usr/share/jms/activemq-all-5.15.9.jar
    - /usr/share/jms/log4j-1.2.17.jar
--------------------------------------------------

<1> Section name for this broker definition. This should be the value of `yaml_section` in the logstash configuration file.
    Note that multiple sections can co-exist in the same yaml file.
<2> Full url of the broker. See your JMS Provider documentation for details.
<3> Full name (including package name) of Java connection factory used to create a connection with your JMS provider.
<4> Implementation specific configuration parameters to be used with the connection factory specified.
    in <3>. Each JMS Provider will have its own set of parameters that can be used here. These parameters are mapped to
    `set` methods on the provided connection factory, and can be supplied in either 'snake' or 'camel' case. In <4> above,
    the `send_timeout` property will call the `setSendTimeout` on the supplied connection factory. See your JMS provider
   documentation for implementation specific details.
<5> List of jars required by the JMS provider. Paths should be the fully qualified location of all jar files required
    by the JMS provider. This list may also include dependent jars as well as specific jars from the JMS provider.


===== JNDI Connection

This section contains sample configurations for connecting to a JMS provider that is using JNDI using a combination
 of the Logstash configuration and the yaml file

===== Logstash Configuration for JNDI Connection (for configs including yaml)

[source,ruby]
--------------------------------------------------
 input {
    jms {
        # Logstash specific configuration settings <1>
        include_header => false
        include_properties => false
        include_body => true
        use_jms_timestamp => false
        destination => "myqueue"
        pub_sub => false
        # Location of yaml file, and which section to use for configuration
        yaml_file => "~/jms.yml"  <2>
        yaml_section => "mybroker" <3>
    }
 }
--------------------------------------------------

<1> Configuration settings
<2> Full path to a yaml file containing the definition for the ConnectionFactory.
<3> Section name in the yaml file of the ConnectionFactory for this plugin definition


===== Yaml File for JNDI Connection

[source,yaml]
--------------------------------------------------

solace: <1>
  :jndi_name: /jms/cf/default <2>
  :jndi_context: <3>
    java.naming.factory.initial: com.solacesystems.jndi.SolJNDIInitialContextFactory
    java.naming.security.principal: solace-cloud-client@user
    java.naming.provider.url: tcp://address.messaging.solace.cloud:20608
    java.naming.security.credentials: verysecret
  :require_jars: <4>
    - /usr/share/jms/commons-lang-2.6.jar
    - /usr/share/jms/sol-jms-10.5.0.jar
    - /usr/share/jms/geronimo-jms_1.1_spec-1.1.1.jar
    - /usr/share/jms/commons-lang-2.6.jar
--------------------------------------------------

<1> Section name for this broker definition. This should be the value of `yaml_section` in the Logstash configuration file.
<2> Name of JNDI entry at which the Factory can be found
<3> JNDI context settings. Contains details of how to connect to JNDI server. See your JMS provider documentation for
     implementation specific details.
<4> List of jars required by the JMS provider. Paths should be the fully qualified location of all jar files required
     by the JMS provider. This list may also include dependent jars as well as specific jars from the JMS provider.

==== Jar files

In order to communicate with a JMS broker, the plugin must load the jar files necessary for each client type.
This can be set in the yaml file, or in the main configuration if a yaml file is not necessary. The `require_jars`
  setting should include the full path for each jar file required for the client. Eg

Logstash configuration:

[source,ruby]
--------------------------------------------------
output{
  jms {
          :
          [snip]
     require_jars => ['/usr/share/jms/commons-lang-2.6.jar',
                      '/usr/share/jms/sol-jms-10.5.0.jar',
                      '/usr/share/jms/geronimo-jms_1.1_spec-1.1.1.jar',
                      '/usr/share/jms/commons-lang-2.6.jar']
  }
}
--------------------------------------------------

===== Setting System Properties

Many JMS providers allow or expect System properties to be set to configure certain properties when using JMS, for
example, the Apache qpid JMS client allows the connection factory lookup to be stored there, and the Solace JMS client
allows many properties, such as number of connection retries to be set as System properties. These can be set using the
`system_properties` configuration option, or via the Logstash `jvm.options` file. Bear in mind that System properties
are scoped to the JVM process, so multiple inputs/outputs may not use different settings for System properties.

===== Multiple JMS inputs/outputs in the same Logstash process

The use of multiple JMS consumers and producers in the same Logstash process is unsupported if:

  * System properties need to be different for any of the consumers/producers
  * Different keystores or truststores are required for any of the consumers/producers


[id="plugins-{type}s-{plugin}-options"]
==== Jms Output Configuration Options

This plugin supports the following configuration options plus the <<plugins-{type}s-{plugin}-common-options>> described later.

[cols="<,<,<",options="header",]
|=======================================================================
|Setting |Input type|Required
| <<plugins-{type}s-{plugin}-broker_url>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-delivery_mode>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-destination>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-factory>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-factory_settings>> |<<hash,hash>>|No
| <<plugins-{type}s-{plugin}-jndi_context>> |<<hash,hash>>|No
| <<plugins-{type}s-{plugin}-jndi_name>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-keystore>> |a valid filesystem path|No
| <<plugins-{type}s-{plugin}-keystore_password>> |<<password,password>>|No
| <<plugins-{type}s-{plugin}-password>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-priority>> |<<number,number>>|No
| <<plugins-{type}s-{plugin}-pub_sub>> |<<boolean,boolean>>|No
| <<plugins-{type}s-{plugin}-require_jars>> |<<array,array>>|No
| <<plugins-{type}s-{plugin}-system_properties>> |<<hash,hash>>|No
| <<plugins-{type}s-{plugin}-time_to_live>> |<<number,number>>|No
| <<plugins-{type}s-{plugin}-truststore>> |a valid filesystem path|No
| <<plugins-{type}s-{plugin}-truststore_password>> |<<password,password>>|No
| <<plugins-{type}s-{plugin}-username>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-yaml_file>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-yaml_section>> |<<string,string>>|No
|=======================================================================

Also see <<plugins-{type}s-{plugin}-common-options>> for a list of options supported by all
output plugins.

&nbsp;

[id="plugins-{type}s-{plugin}-broker_url"]
===== `broker_url` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Url to use when connecting to the JMS provider

[id="plugins-{type}s-{plugin}-delivery_mode"]
===== `delivery_mode` 

  * Value type is <<string,string>>
  * Default value is `nil`

Name of delivery mode to use
Options are "persistent" and "non_persistent" if not defined, nothing will be passed and the default delivery
 mode will be used.

[id="plugins-{type}s-{plugin}-destination"]
===== `destination` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Name of the destination queue or topic to use.
Mandatory

[id="plugins-{type}s-{plugin}-factory"]
===== `factory` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Full name (including package name) of Java connection factory used to create a connection with your JMS provider.

[id="plugins-{type}s-{plugin}-factory_settings"]
===== `factory_settings`

  * Value type is <<hash,hash>>
  * There is no default value for this setting.

Hash of implementation specific configuration values to set on the connection factory of the JMS provider. Each JMS
 Provider will have its own set of parameters that can be used here. These parameters are mapped to `set` methods on
 the provided connection factory, and can be supplied in either 'snake' or 'camel' case. For example, a hash including
 `send_timeout => 30000` would call `setSendTimeout(30000)` on the supplied connection factory.
 See your JMS provider documentation for implementation specific details.

[id="plugins-{type}s-{plugin}-jndi_context"]
===== `jndi_context` 

  * Value type is <<hash,hash>>
  * There is no default value for this setting.

Mandatory if jndi lookup is being used,
contains details on how to connect to JNDI server

[id="plugins-{type}s-{plugin}-jndi_name"]
===== `jndi_name` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Name of JNDI entry at which the Factory can be found

[id="plugins-{type}s-{plugin}-keystore"]
===== `keystore`

  * Value type is <<path,path>>
  * There is no default value for this setting.

If you need to use a custom keystore (`.jks`) specify it here. This does not work with .pem keys

[id="plugins-{type}s-{plugin}-keystore_password"]
===== `keystore_password`

  * Value type is <<password,password>>
  * There is no default value for this setting.

Specify the keystore password here.
Note, most .jks files created with keytool require a password

[id="plugins-{type}s-{plugin}-password"]
===== `password` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Password to use when connecting to the JMS provider

[id="plugins-{type}s-{plugin}-priority"]
===== `priority`

  * Value type is <<number,number>>
  * There is no default value

Sets the producer's default priority. The default value will be whatever is provided by the JMS Provider

[id="plugins-{type}s-{plugin}-pub_sub"]
===== `pub_sub` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

If pub_sub (topic) style should be used or not.
Mandatory

[id="plugins-{type}s-{plugin}-require_jars"]
===== `require_jars` 

  * Value type is <<array,array>>
  * There is no default value for this setting.

An optional array of Jar file names to load for the specified JMS provider.
By using this option it is not necessary to put all the JMS Provider specific jar files into the
java CLASSPATH prior to starting Logstash.

[id="plugins-{type}s-{plugin}-system_properties"]
===== `system_properties`

  * Value type is <<hash,hash>>
  * There is no default value for this setting.

Any System properties that the JMS provider requires can be set either in a Hash here, or in `jvm.options`

[id="plugins-{type}s-{plugin}-time_to_live"]
===== `time_to_live`

  * Value type is <<number,number>>
  * There is no default value

Sets the length of time in milliseconds from its dispatch time that a produced message should be retained by the message
system. The default value will be whatever is provided by the JMS Provider.

[id="plugins-{type}s-{plugin}-truststore"]
===== `truststore`

  * Value type is <<path,path>>
  * There is no default value for this setting.

If you need to use a custom truststore (`.jks`) specify it here. This does not work with .pem certs.

[id="plugins-{type}s-{plugin}-truststore_password"]
===== `truststore_password`

  * Value type is <<password,password>>
  * There is no default value for this setting.

Specify the truststore password here. This setting is only used if `truststore` is set.
Note, most .jks files created with keytool require a password.


[id="plugins-{type}s-{plugin}-username"]
===== `username` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Username to connect to JMS provider with

[id="plugins-{type}s-{plugin}-yaml_file"]
===== `yaml_file` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Full path to `yaml` configuration file.

[id="plugins-{type}s-{plugin}-yaml_section"]
===== `yaml_section` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

Yaml config file section name. See earlier in this documentation for some examples, plus
[Example jms.yml](https://github.com/reidmorrison/jruby-jms/blob/master/examples/jms.yml)



[id="plugins-{type}s-{plugin}-common-options"]
include::{include_path}/{type}.asciidoc[]

:default_codec!: